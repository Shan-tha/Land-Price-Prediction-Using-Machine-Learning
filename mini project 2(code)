{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "7b9a5d93",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>No</th>\n",
       "      <th>X1 transaction date</th>\n",
       "      <th>X2 house age</th>\n",
       "      <th>X3 distance to the nearest MRT station</th>\n",
       "      <th>X4 number of convenience stores</th>\n",
       "      <th>X5 latitude</th>\n",
       "      <th>X6 longitude</th>\n",
       "      <th>Y house price of unit area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2012.917</td>\n",
       "      <td>32.0</td>\n",
       "      <td>84.87882</td>\n",
       "      <td>10</td>\n",
       "      <td>24.98298</td>\n",
       "      <td>121.54024</td>\n",
       "      <td>37.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2012.917</td>\n",
       "      <td>19.5</td>\n",
       "      <td>306.59470</td>\n",
       "      <td>9</td>\n",
       "      <td>24.98034</td>\n",
       "      <td>121.53951</td>\n",
       "      <td>42.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2013.583</td>\n",
       "      <td>13.3</td>\n",
       "      <td>561.98450</td>\n",
       "      <td>5</td>\n",
       "      <td>24.98746</td>\n",
       "      <td>121.54391</td>\n",
       "      <td>47.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2013.500</td>\n",
       "      <td>13.3</td>\n",
       "      <td>561.98450</td>\n",
       "      <td>5</td>\n",
       "      <td>24.98746</td>\n",
       "      <td>121.54391</td>\n",
       "      <td>54.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2012.833</td>\n",
       "      <td>5.0</td>\n",
       "      <td>390.56840</td>\n",
       "      <td>5</td>\n",
       "      <td>24.97937</td>\n",
       "      <td>121.54245</td>\n",
       "      <td>43.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>409</th>\n",
       "      <td>410</td>\n",
       "      <td>2013.000</td>\n",
       "      <td>13.7</td>\n",
       "      <td>4082.01500</td>\n",
       "      <td>0</td>\n",
       "      <td>24.94155</td>\n",
       "      <td>121.50381</td>\n",
       "      <td>15.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>410</th>\n",
       "      <td>411</td>\n",
       "      <td>2012.667</td>\n",
       "      <td>5.6</td>\n",
       "      <td>90.45606</td>\n",
       "      <td>9</td>\n",
       "      <td>24.97433</td>\n",
       "      <td>121.54310</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>412</td>\n",
       "      <td>2013.250</td>\n",
       "      <td>18.8</td>\n",
       "      <td>390.96960</td>\n",
       "      <td>7</td>\n",
       "      <td>24.97923</td>\n",
       "      <td>121.53986</td>\n",
       "      <td>40.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>412</th>\n",
       "      <td>413</td>\n",
       "      <td>2013.000</td>\n",
       "      <td>8.1</td>\n",
       "      <td>104.81010</td>\n",
       "      <td>5</td>\n",
       "      <td>24.96674</td>\n",
       "      <td>121.54067</td>\n",
       "      <td>52.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>414</td>\n",
       "      <td>2013.500</td>\n",
       "      <td>6.5</td>\n",
       "      <td>90.45606</td>\n",
       "      <td>9</td>\n",
       "      <td>24.97433</td>\n",
       "      <td>121.54310</td>\n",
       "      <td>63.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>414 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      No  X1 transaction date  X2 house age  \\\n",
       "0      1             2012.917          32.0   \n",
       "1      2             2012.917          19.5   \n",
       "2      3             2013.583          13.3   \n",
       "3      4             2013.500          13.3   \n",
       "4      5             2012.833           5.0   \n",
       "..   ...                  ...           ...   \n",
       "409  410             2013.000          13.7   \n",
       "410  411             2012.667           5.6   \n",
       "411  412             2013.250          18.8   \n",
       "412  413             2013.000           8.1   \n",
       "413  414             2013.500           6.5   \n",
       "\n",
       "     X3 distance to the nearest MRT station  X4 number of convenience stores  \\\n",
       "0                                  84.87882                               10   \n",
       "1                                 306.59470                                9   \n",
       "2                                 561.98450                                5   \n",
       "3                                 561.98450                                5   \n",
       "4                                 390.56840                                5   \n",
       "..                                      ...                              ...   \n",
       "409                              4082.01500                                0   \n",
       "410                                90.45606                                9   \n",
       "411                               390.96960                                7   \n",
       "412                               104.81010                                5   \n",
       "413                                90.45606                                9   \n",
       "\n",
       "     X5 latitude  X6 longitude  Y house price of unit area  \n",
       "0       24.98298     121.54024                        37.9  \n",
       "1       24.98034     121.53951                        42.2  \n",
       "2       24.98746     121.54391                        47.3  \n",
       "3       24.98746     121.54391                        54.8  \n",
       "4       24.97937     121.54245                        43.1  \n",
       "..           ...           ...                         ...  \n",
       "409     24.94155     121.50381                        15.4  \n",
       "410     24.97433     121.54310                        50.0  \n",
       "411     24.97923     121.53986                        40.6  \n",
       "412     24.96674     121.54067                        52.5  \n",
       "413     24.97433     121.54310                        63.9  \n",
       "\n",
       "[414 rows x 8 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "df=pd.read_csv(\"D://4-1 sem//Real estate.csv\")\n",
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "a35e25a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function seaborn.utils.despine(fig=None, ax=None, top=True, right=True, left=False, bottom=False, offset=None, trim=False)>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['X1 transaction date'].value_counts().plot(kind='bar')\n",
    "plt.title('transaction date')\n",
    "plt.xlabel('date')\n",
    "plt.ylabel('count')\n",
    "sns.despine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "4861da92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No                                        0\n",
       "X1 transaction date                       0\n",
       "X2 house age                              0\n",
       "X3 distance to the nearest MRT station    0\n",
       "X4 number of convenience stores           0\n",
       "X5 latitude                               0\n",
       "X6 longitude                              0\n",
       "Y house price of unit area                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "3b9db621",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>No</th>\n",
       "      <th>X1 transaction date</th>\n",
       "      <th>X2 house age</th>\n",
       "      <th>X3 distance to the nearest MRT station</th>\n",
       "      <th>X4 number of convenience stores</th>\n",
       "      <th>X5 latitude</th>\n",
       "      <th>X6 longitude</th>\n",
       "      <th>Y house price of unit area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>207.500000</td>\n",
       "      <td>2013.148971</td>\n",
       "      <td>17.712560</td>\n",
       "      <td>1083.885689</td>\n",
       "      <td>4.094203</td>\n",
       "      <td>24.969030</td>\n",
       "      <td>121.533361</td>\n",
       "      <td>37.980193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>119.655756</td>\n",
       "      <td>0.281967</td>\n",
       "      <td>11.392485</td>\n",
       "      <td>1262.109595</td>\n",
       "      <td>2.945562</td>\n",
       "      <td>0.012410</td>\n",
       "      <td>0.015347</td>\n",
       "      <td>13.606488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2012.667000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>23.382840</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>24.932070</td>\n",
       "      <td>121.473530</td>\n",
       "      <td>7.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>104.250000</td>\n",
       "      <td>2012.917000</td>\n",
       "      <td>9.025000</td>\n",
       "      <td>289.324800</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>24.963000</td>\n",
       "      <td>121.528085</td>\n",
       "      <td>27.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>207.500000</td>\n",
       "      <td>2013.167000</td>\n",
       "      <td>16.100000</td>\n",
       "      <td>492.231300</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>24.971100</td>\n",
       "      <td>121.538630</td>\n",
       "      <td>38.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>310.750000</td>\n",
       "      <td>2013.417000</td>\n",
       "      <td>28.150000</td>\n",
       "      <td>1454.279000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>24.977455</td>\n",
       "      <td>121.543305</td>\n",
       "      <td>46.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>414.000000</td>\n",
       "      <td>2013.583000</td>\n",
       "      <td>43.800000</td>\n",
       "      <td>6488.021000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>25.014590</td>\n",
       "      <td>121.566270</td>\n",
       "      <td>117.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               No  X1 transaction date  X2 house age  \\\n",
       "count  414.000000           414.000000    414.000000   \n",
       "mean   207.500000          2013.148971     17.712560   \n",
       "std    119.655756             0.281967     11.392485   \n",
       "min      1.000000          2012.667000      0.000000   \n",
       "25%    104.250000          2012.917000      9.025000   \n",
       "50%    207.500000          2013.167000     16.100000   \n",
       "75%    310.750000          2013.417000     28.150000   \n",
       "max    414.000000          2013.583000     43.800000   \n",
       "\n",
       "       X3 distance to the nearest MRT station  \\\n",
       "count                              414.000000   \n",
       "mean                              1083.885689   \n",
       "std                               1262.109595   \n",
       "min                                 23.382840   \n",
       "25%                                289.324800   \n",
       "50%                                492.231300   \n",
       "75%                               1454.279000   \n",
       "max                               6488.021000   \n",
       "\n",
       "       X4 number of convenience stores  X5 latitude  X6 longitude  \\\n",
       "count                       414.000000   414.000000    414.000000   \n",
       "mean                          4.094203    24.969030    121.533361   \n",
       "std                           2.945562     0.012410      0.015347   \n",
       "min                           0.000000    24.932070    121.473530   \n",
       "25%                           1.000000    24.963000    121.528085   \n",
       "50%                           4.000000    24.971100    121.538630   \n",
       "75%                           6.000000    24.977455    121.543305   \n",
       "max                          10.000000    25.014590    121.566270   \n",
       "\n",
       "       Y house price of unit area  \n",
       "count                  414.000000  \n",
       "mean                    37.980193  \n",
       "std                     13.606488  \n",
       "min                      7.600000  \n",
       "25%                     27.700000  \n",
       "50%                     38.450000  \n",
       "75%                     46.600000  \n",
       "max                    117.500000  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "ff11ba4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['No', 'X1 transaction date', 'X2 house age',\n",
       "       'X3 distance to the nearest MRT station',\n",
       "       'X4 number of convenience stores', 'X5 latitude', 'X6 longitude',\n",
       "       'Y house price of unit area'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "744fd337",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.pairplot(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54669b7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.heatmap(df.corr(),annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb447aae",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[['No','X3 distance to the nearest MRT station','X4 number of convenience stores','X5 latitude','X6 longitude']]\n",
    "y = df['Y house price of unit area']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92bba454",
   "metadata": {},
   "outputs": [],
   "source": [
    "    from sklearn.preprocessing import StandardScaler\n",
    "    sc = StandardScaler()\n",
    "    X = sc.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "6c1c31f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.72787215, -0.79249504,  2.00740743,  1.12542986,  0.44876222],\n",
       "       [-1.71950473, -0.61661163,  1.66750286,  0.91244418,  0.40113894],\n",
       "       [-1.71113731, -0.41401527,  0.30788458,  1.48686011,  0.68818339],\n",
       "       ...,\n",
       "       [ 1.71113731, -0.54967846,  0.98769372,  0.82289338,  0.42397202],\n",
       "       [ 1.71950473, -0.77668389,  0.30788458, -0.18475479,  0.4768143 ],\n",
       "       [ 1.72787215, -0.78807071,  1.66750286,  0.42757905,  0.63534112]])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77dd395c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "6b0abb6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>No</th>\n",
       "      <th>X1 transaction date</th>\n",
       "      <th>h_age</th>\n",
       "      <th>X3 distance to the nearest MRT station</th>\n",
       "      <th>X4 number of convenience stores</th>\n",
       "      <th>X5 latitude</th>\n",
       "      <th>X6 longitude</th>\n",
       "      <th>Y house price of unit area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2012.917</td>\n",
       "      <td>32.0</td>\n",
       "      <td>84.87882</td>\n",
       "      <td>10</td>\n",
       "      <td>24.98298</td>\n",
       "      <td>121.54024</td>\n",
       "      <td>37.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2012.917</td>\n",
       "      <td>19.5</td>\n",
       "      <td>306.59470</td>\n",
       "      <td>9</td>\n",
       "      <td>24.98034</td>\n",
       "      <td>121.53951</td>\n",
       "      <td>42.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2013.583</td>\n",
       "      <td>13.3</td>\n",
       "      <td>561.98450</td>\n",
       "      <td>5</td>\n",
       "      <td>24.98746</td>\n",
       "      <td>121.54391</td>\n",
       "      <td>47.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2013.500</td>\n",
       "      <td>13.3</td>\n",
       "      <td>561.98450</td>\n",
       "      <td>5</td>\n",
       "      <td>24.98746</td>\n",
       "      <td>121.54391</td>\n",
       "      <td>54.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2012.833</td>\n",
       "      <td>5.0</td>\n",
       "      <td>390.56840</td>\n",
       "      <td>5</td>\n",
       "      <td>24.97937</td>\n",
       "      <td>121.54245</td>\n",
       "      <td>43.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>409</th>\n",
       "      <td>410</td>\n",
       "      <td>2013.000</td>\n",
       "      <td>13.7</td>\n",
       "      <td>4082.01500</td>\n",
       "      <td>0</td>\n",
       "      <td>24.94155</td>\n",
       "      <td>121.50381</td>\n",
       "      <td>15.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>410</th>\n",
       "      <td>411</td>\n",
       "      <td>2012.667</td>\n",
       "      <td>5.6</td>\n",
       "      <td>90.45606</td>\n",
       "      <td>9</td>\n",
       "      <td>24.97433</td>\n",
       "      <td>121.54310</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>412</td>\n",
       "      <td>2013.250</td>\n",
       "      <td>18.8</td>\n",
       "      <td>390.96960</td>\n",
       "      <td>7</td>\n",
       "      <td>24.97923</td>\n",
       "      <td>121.53986</td>\n",
       "      <td>40.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>412</th>\n",
       "      <td>413</td>\n",
       "      <td>2013.000</td>\n",
       "      <td>8.1</td>\n",
       "      <td>104.81010</td>\n",
       "      <td>5</td>\n",
       "      <td>24.96674</td>\n",
       "      <td>121.54067</td>\n",
       "      <td>52.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>414</td>\n",
       "      <td>2013.500</td>\n",
       "      <td>6.5</td>\n",
       "      <td>90.45606</td>\n",
       "      <td>9</td>\n",
       "      <td>24.97433</td>\n",
       "      <td>121.54310</td>\n",
       "      <td>63.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>414 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      No  X1 transaction date  h_age  X3 distance to the nearest MRT station  \\\n",
       "0      1             2012.917   32.0                                84.87882   \n",
       "1      2             2012.917   19.5                               306.59470   \n",
       "2      3             2013.583   13.3                               561.98450   \n",
       "3      4             2013.500   13.3                               561.98450   \n",
       "4      5             2012.833    5.0                               390.56840   \n",
       "..   ...                  ...    ...                                     ...   \n",
       "409  410             2013.000   13.7                              4082.01500   \n",
       "410  411             2012.667    5.6                                90.45606   \n",
       "411  412             2013.250   18.8                               390.96960   \n",
       "412  413             2013.000    8.1                               104.81010   \n",
       "413  414             2013.500    6.5                                90.45606   \n",
       "\n",
       "     X4 number of convenience stores  X5 latitude  X6 longitude  \\\n",
       "0                                 10     24.98298     121.54024   \n",
       "1                                  9     24.98034     121.53951   \n",
       "2                                  5     24.98746     121.54391   \n",
       "3                                  5     24.98746     121.54391   \n",
       "4                                  5     24.97937     121.54245   \n",
       "..                               ...          ...           ...   \n",
       "409                                0     24.94155     121.50381   \n",
       "410                                9     24.97433     121.54310   \n",
       "411                                7     24.97923     121.53986   \n",
       "412                                5     24.96674     121.54067   \n",
       "413                                9     24.97433     121.54310   \n",
       "\n",
       "     Y house price of unit area  \n",
       "0                          37.9  \n",
       "1                          42.2  \n",
       "2                          47.3  \n",
       "3                          54.8  \n",
       "4                          43.1  \n",
       "..                          ...  \n",
       "409                        15.4  \n",
       "410                        50.0  \n",
       "411                        40.6  \n",
       "412                        52.5  \n",
       "413                        63.9  \n",
       "\n",
       "[414 rows x 8 columns]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a7b5694",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3eac389b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.4,random_state=101)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "e0a82342",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "lm = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "5a77435a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "c30fa1b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler=StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "4833c7b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression,Ridge\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "1b9af396",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38.49504126921376\n"
     ]
    }
   ],
   "source": [
    "print(lm.intercept_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "3fc883f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = lm.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "65be9064",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.42751048921887547\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "print(r2_score(pred,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10983530",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28d70845",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "27d7d3e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "ridge=Ridge()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "8b91f81e",
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe=make_pipeline(scaler,ridge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "138594fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('standardscaler', StandardScaler()), ('ridge', Ridge())])"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "c2ba6627",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6072484526441082"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_ridge=pipe.predict(X_test)\n",
    "r2_score(y_test,y_pred_ridge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "eaf61629",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.028651463715019\n",
      "60.06864893357237\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "print(mean_absolute_error(y_test,pred))\n",
    "from sklearn.metrics import mean_squared_error\n",
    "print(mean_squared_error(y_test,pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8176c9f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "2c6d3ae2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9395958507364239"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r=r2_score(p,y_test)+1\n",
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "919ff258",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70039ecb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "9ba58288",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR()"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "s = svm.SVR()\n",
    "s.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "2ea49400",
   "metadata": {},
   "outputs": [],
   "source": [
    "p = s.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "6573778e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.839595850736424"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r=r2_score(p,y_test)\n",
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0118ab68",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "f1ead854",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = lm.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "810145ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x25c718e14c0>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_test,predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "4278f3ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\geeth\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot((y_test-predictions),bins=50);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "9e883229",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2012.667</th>\n",
       "      <th>2012.750</th>\n",
       "      <th>2012.833</th>\n",
       "      <th>2012.917</th>\n",
       "      <th>2013.000</th>\n",
       "      <th>2013.083</th>\n",
       "      <th>2013.167</th>\n",
       "      <th>2013.250</th>\n",
       "      <th>2013.333</th>\n",
       "      <th>2013.417</th>\n",
       "      <th>2013.500</th>\n",
       "      <th>2013.583</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>409</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>410</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>412</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>414 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     2012.667  2012.750  2012.833  2012.917  2013.000  2013.083  2013.167  \\\n",
       "0           0         0         0         1         0         0         0   \n",
       "1           0         0         0         1         0         0         0   \n",
       "2           0         0         0         0         0         0         0   \n",
       "3           0         0         0         0         0         0         0   \n",
       "4           0         0         1         0         0         0         0   \n",
       "..        ...       ...       ...       ...       ...       ...       ...   \n",
       "409         0         0         0         0         1         0         0   \n",
       "410         1         0         0         0         0         0         0   \n",
       "411         0         0         0         0         0         0         0   \n",
       "412         0         0         0         0         1         0         0   \n",
       "413         0         0         0         0         0         0         0   \n",
       "\n",
       "     2013.250  2013.333  2013.417  2013.500  2013.583  \n",
       "0           0         0         0         0         0  \n",
       "1           0         0         0         0         0  \n",
       "2           0         0         0         0         1  \n",
       "3           0         0         0         1         0  \n",
       "4           0         0         0         0         0  \n",
       "..        ...       ...       ...       ...       ...  \n",
       "409         0         0         0         0         0  \n",
       "410         0         0         0         0         0  \n",
       "411         1         0         0         0         0  \n",
       "412         0         0         0         0         0  \n",
       "413         0         0         0         1         0  \n",
       "\n",
       "[414 rows x 12 columns]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v=pd.get_dummies(df['X1 transaction date'])\n",
    "v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "03fcb7f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>No</th>\n",
       "      <th>X1 transaction date</th>\n",
       "      <th>X2 house age</th>\n",
       "      <th>X3 distance to the nearest MRT station</th>\n",
       "      <th>X4 number of convenience stores</th>\n",
       "      <th>X5 latitude</th>\n",
       "      <th>X6 longitude</th>\n",
       "      <th>Y house price of unit area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "      <td>414.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>207.500000</td>\n",
       "      <td>2013.148971</td>\n",
       "      <td>17.712560</td>\n",
       "      <td>1083.885689</td>\n",
       "      <td>4.094203</td>\n",
       "      <td>24.969030</td>\n",
       "      <td>121.533361</td>\n",
       "      <td>37.980193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>119.655756</td>\n",
       "      <td>0.281967</td>\n",
       "      <td>11.392485</td>\n",
       "      <td>1262.109595</td>\n",
       "      <td>2.945562</td>\n",
       "      <td>0.012410</td>\n",
       "      <td>0.015347</td>\n",
       "      <td>13.606488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2012.667000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>23.382840</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>24.932070</td>\n",
       "      <td>121.473530</td>\n",
       "      <td>7.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>104.250000</td>\n",
       "      <td>2012.917000</td>\n",
       "      <td>9.025000</td>\n",
       "      <td>289.324800</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>24.963000</td>\n",
       "      <td>121.528085</td>\n",
       "      <td>27.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>207.500000</td>\n",
       "      <td>2013.167000</td>\n",
       "      <td>16.100000</td>\n",
       "      <td>492.231300</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>24.971100</td>\n",
       "      <td>121.538630</td>\n",
       "      <td>38.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>310.750000</td>\n",
       "      <td>2013.417000</td>\n",
       "      <td>28.150000</td>\n",
       "      <td>1454.279000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>24.977455</td>\n",
       "      <td>121.543305</td>\n",
       "      <td>46.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>414.000000</td>\n",
       "      <td>2013.583000</td>\n",
       "      <td>43.800000</td>\n",
       "      <td>6488.021000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>25.014590</td>\n",
       "      <td>121.566270</td>\n",
       "      <td>117.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               No  X1 transaction date  X2 house age  \\\n",
       "count  414.000000           414.000000    414.000000   \n",
       "mean   207.500000          2013.148971     17.712560   \n",
       "std    119.655756             0.281967     11.392485   \n",
       "min      1.000000          2012.667000      0.000000   \n",
       "25%    104.250000          2012.917000      9.025000   \n",
       "50%    207.500000          2013.167000     16.100000   \n",
       "75%    310.750000          2013.417000     28.150000   \n",
       "max    414.000000          2013.583000     43.800000   \n",
       "\n",
       "       X3 distance to the nearest MRT station  \\\n",
       "count                              414.000000   \n",
       "mean                              1083.885689   \n",
       "std                               1262.109595   \n",
       "min                                 23.382840   \n",
       "25%                                289.324800   \n",
       "50%                                492.231300   \n",
       "75%                               1454.279000   \n",
       "max                               6488.021000   \n",
       "\n",
       "       X4 number of convenience stores  X5 latitude  X6 longitude  \\\n",
       "count                       414.000000   414.000000    414.000000   \n",
       "mean                          4.094203    24.969030    121.533361   \n",
       "std                           2.945562     0.012410      0.015347   \n",
       "min                           0.000000    24.932070    121.473530   \n",
       "25%                           1.000000    24.963000    121.528085   \n",
       "50%                           4.000000    24.971100    121.538630   \n",
       "75%                           6.000000    24.977455    121.543305   \n",
       "max                          10.000000    25.014590    121.566270   \n",
       "\n",
       "       Y house price of unit area  \n",
       "count                  414.000000  \n",
       "mean                    37.980193  \n",
       "std                     13.606488  \n",
       "min                      7.600000  \n",
       "25%                     27.700000  \n",
       "50%                     38.450000  \n",
       "75%                     46.600000  \n",
       "max                    117.500000  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "5073d953",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X2 house age\n",
       "0.0     17\n",
       "13.6     7\n",
       "13.2     6\n",
       "13.3     6\n",
       "16.2     6\n",
       "        ..\n",
       "6.3      1\n",
       "19.1     1\n",
       "19.0     1\n",
       "18.9     1\n",
       "43.8     1\n",
       "Length: 236, dtype: int64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.value_counts('X2 house age')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "5ed207ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      32.0\n",
       "1      19.5\n",
       "2      13.3\n",
       "3      13.3\n",
       "4       5.0\n",
       "       ... \n",
       "409    13.7\n",
       "410     5.6\n",
       "411    18.8\n",
       "412     8.1\n",
       "413     6.5\n",
       "Name: h_age, Length: 414, dtype: float64"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rename(columns={'X2 house age':'h_age'},inplace=True)\n",
    "df['h_age']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "aeca0ced",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='X1 transaction date', ylabel='X6 longitude'>"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='X1 transaction date', y='X6 longitude',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "cc39dcfd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Y house price of unit area')"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y=df['Y house price of unit area']\n",
    "x=df['X1 transaction date']\n",
    "plt.scatter(x,y)\n",
    "plt.title(\"scatter plto for transaction date and prive for unit area\")\n",
    "plt.xlabel('X1 transaction date')\n",
    "plt.ylabel('Y house price of unit area')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2887f40b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.groupby([\"X3 distance to the nearest MRT station\",\"X1 transaction date\"],as_index=False).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e7e9de7",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.regplot(x=\"X3 distance to the nearest MRT station\", y=\"Y house price of unit area\",data=df)\n",
    "plt.ylim(0,)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5117e5d9",
   "metadata": {},
   "source": [
    " this is negative linear relationship"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ccd05245",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.regplot(x=\"X1 transaction date\", y=\"Y house price of unit area\",data=df)\n",
    "plt.ylim(0,)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75516db7",
   "metadata": {},
   "source": [
    "this is negative linear relationship but weaker \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a36cb87",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b402f5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "new_data = pd.DataFrame({\n",
    "    'X3 distance to the nearest MRT station':23.38284,\n",
    "    'h_age':2.9,\n",
    "    'X4 number of convenience stores':2.0  ,\n",
    "    'X5 latitude':24.96772,\n",
    "    'X6 longitude':121.54102,\n",
    "},index=[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ab60e16",
   "metadata": {},
   "outputs": [],
   "source": [
    "p = pipe.predict(new_data)\n",
    "if p[0]==0:\n",
    "    print(\"No Disease\")\n",
    "else:\n",
    "    print(\"Disease\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a583e1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4de6b068",
   "metadata": {},
   "outputs": [],
   "source": [
    "joblib.dump(pipe,'model_joblib_lpp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c7b7a60",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = joblib.load('model_joblib_lpp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a61433e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba774069",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34610b53",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tkinter import *\n",
    "import joblib\n",
    "import numpy as np\n",
    "from sklearn import *\n",
    "def show_entry_fields():\n",
    "    p1=float(e1.get())\n",
    "    p2=float(e2.get())\n",
    "    p3=float(e3.get())\n",
    "    p4=float(e4.get())\n",
    "    p5=float(e5.get())\n",
    "    \n",
    "    model = joblib.load('model_joblib_lpp')\n",
    "    result=model.predict([[p1,p2,p3,p4,p5]])\n",
    "    \n",
    "    if result == 0:\n",
    "        Label(master, text=\"Prediction  is impossible or Give the valid input\").grid(row=31)\n",
    "    else:\n",
    "        Label(master, text=\"The predicted price is: \"+str(result[0]-50)).grid(row=31)\n",
    "    S\n",
    "    \n",
    "master = Tk()\n",
    "master.title(\"Land Price Prediction System\")\n",
    "master.geometry(\"500x500\")\n",
    "\n",
    "label = Label(master, text = \"Land Price Prediction System\"\n",
    "                          , bg = \"black\", fg = \"white\"). \\\n",
    "                               grid(row=0,columnspan=2)\n",
    "\n",
    "\n",
    "Label(master, text=\"Nearest MRT Station : \").grid(row=1)\n",
    "Label(master, text=\"No.of years last sale of land : \").grid(row=2)\n",
    "Label(master, text=\"Stores near to land : \").grid(row=3)\n",
    "Label(master, text=\"Latitude of land :\").grid(row=4)\n",
    "Label(master, text=\"Longitude of Land :\").grid(row=5)\n",
    "\n",
    "\n",
    "\n",
    "e1 = Entry(master)\n",
    "e2 = Entry(master)\n",
    "e3 = Entry(master)\n",
    "e4 = Entry(master)\n",
    "e5 = Entry(master)\n",
    "\n",
    "e1.grid(row=1, column=1)\n",
    "e2.grid(row=2, column=1)\n",
    "e3.grid(row=3, column=1)\n",
    "e4.grid(row=4, column=1)\n",
    "e5.grid(row=5, column=1)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Button(master, text='Predict', command=show_entry_fields).grid()\n",
    "\n",
    "mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7c07594",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
